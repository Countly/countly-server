# TODO: if plugins grep hoooks compile v8-sandbox hooks with base as parent and then later copy to plugins/hooks/node_modules
###############################################################################
# Stage 0 – base toolchain & node_modules (no full source tree)               #
###############################################################################
FROM node:24-bookworm-slim AS base

ARG COUNTLY_PLUGINS=mobile,web,plugins,density,locale,browser,sources,views,license,drill,funnels,retention_segments,flows,cohorts,surveys,remote-config,formulas,activity-map,concurrent_users,logger,systemlogs,populator,reports,crashes,geo,block,users,star-rating,slipping-away-users,compare,server-stats,dbviewer,crash_symbolication,crashes-jira,groups,alerts,times-of-day,onboarding,active_users,config-transfer,consolidate,data-manager,dashboards,sdk,guides,journey_engine,content,clickhouse,desktop,ab-testing
ARG GEOIP=empty
ENV HUSKY=0

# 0.1  core build & runtime libs (single APT layer for better cache)
RUN --mount=type=cache,id=apt-cache,target=/var/cache/apt \
    --mount=type=cache,id=apt-cache,target=/var/lib/apt/lists \
    apt-get update && \
    apt-get install -y --no-install-recommends \
        ca-certificates wget gnupg git make gcc g++ build-essential sudo xz-utils curl \
        zlib1g-dev libssl3 libncurses5-dev libgdbm-dev libnss3-dev libssl-dev \
        libsqlite3-dev libreadline-dev libffi-dev libbz2-dev \
        libgbm-dev libgbm1 gconf-service libasound2 libatk1.0-0 libatk-bridge2.0-0 \
        libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 \
        libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 \
        libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 \
        libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 \
        libxrandr2 libxrender1 libxss1 libxtst6 fonts-liberation libappindicator1 \
        lsb-release xdg-utils

# 0.2  build & install CPython 3.8.
RUN --mount=type=cache,id=python-src,target=/usr/src,sharing=locked \
    set -eux; \
    cd /usr/src && \
    wget -q https://www.python.org/ftp/python/3.8.20/Python-3.8.20.tar.xz && \
    tar -xf Python-3.8.20.tar.xz && cd Python-3.8.20 && \
    ./configure --enable-optimizations --enable-shared && \
    make -j"$(nproc)" && make altinstall && \
    ldconfig && \
    ln -sf /usr/local/bin/python3.8 /usr/bin/python3 && \
    python3.8 -m pip install --no-cache-dir --no-build-isolation --upgrade pip setuptools wheel && \
    rm -rf /usr/src/Python*

WORKDIR /opt/countly

###############################################################################
# Stage 1 – AB‑testing model compilation (inherits toolchain from above)      #
###############################################################################
FROM base AS ab-models
ARG COUNTLY_PLUGINS
WORKDIR /opt/countly

# 1.1 copy *only* the bayesian plugin dir – keeps cache tight
COPY plugins/ab-testing/api/bayesian/ ./plugins/ab-testing/api/bayesian/

# 1.2 compile models only if plugin present in the list (with pip cache mount)
RUN --mount=type=cache,id=pip-cache,target=/root/.cache/pip set -eux; \
    # 0. Bail out if ab‑testing plugin is disabled
    echo "$COUNTLY_PLUGINS" | tr ',' '\n' | grep -qx ab-testing \
      || { echo "AB‑testing disabled"; \
           mkdir -p plugins/ab-testing/api/bayesian; \
           touch plugins/ab-testing/api/bayesian/.ab_disabled; \
           exit 0; }; \
    cd plugins/ab-testing/api/bayesian; \
    # 1. Stub distutils/msvccompiler.py (numpy pulls it even on Linux)
    mkdir -p /usr/local/lib/python3.8/distutils && \
    echo 'def get_build_version(*a,**k): return 0' \
      > /usr/local/lib/python3.8/distutils/msvccompiler.py; \
    # tell setuptools to always use the std‑lib copy we just patched
    export SETUPTOOLS_USE_DISTUTILS=stdlib; \
    # 2. Upgrade build tooling
    python3 -m pip install --no-cache-dir --upgrade pip setuptools wheel; \
    # 3. Read requirements.txt, split “first two” vs “the rest”
    HEAD_REQS="$(head -n 2 requirements.txt | grep -v '^#' | xargs echo)"; \
    REST_REQS="$(tail -n +3 requirements.txt | grep -v '^#' | xargs echo)"; \
    # 4. Install Cython & NumPy first (make headers / C‑API available)
    python3 -m pip install --no-cache-dir ${HEAD_REQS}; \
    # 5. Install remaining pins *without* build isolation (sees headers)
    python3 -m pip install --no-cache-dir --no-build-isolation --no-use-pep517 \
        --no-deps ${REST_REQS}; \
    # 6. Compile Bayesian models if script present
    [ -f model.py ] && python3 model.py; \
    touch .models_compiled

###############################################################################
# Stage 2 – node modules with compiled models                                 #
###############################################################################
FROM base AS node-modules
ARG GEOIP=empty
WORKDIR /opt/countly

# 1)copy compiled models first (before npm operations)
COPY --from=ab-models \
     /opt/countly/plugins/ab-testing/api/bayesian \
     ./plugins/ab-testing/api/bayesian/

# 2) root deps  +  GeoIP DB
COPY package*.json ./
COPY bin/offline-geocoder/scripts ./bin/offline-geocoder/scripts

RUN --mount=type=cache,id=npm-cache,target=/root/.npm,sharing=locked \
    npm ci --omit=dev --ignore-scripts && \
    npm run prepare --if-present || true && \
    npm install argon2 --omit=dev --build-from-source --unsafe-perm=true && \
    if [ -n "$GEOIP" ] && [ "$GEOIP" != "empty" ]; then \
        node ./node_modules/geoip-lite/scripts/updatedb.js license_key="$GEOIP"; \
    fi

# 3) offline geocoder data  (cached on its own)
RUN --mount=type=cache,id=geonames-cache,target=/opt/countly/bin/offline-geocoder/data \
    node ./bin/offline-geocoder/scripts/download_geonames_data.js || true

# 4) plugin manifests → deps
COPY plugins/*/package*.json ./plugins/
RUN --mount=type=cache,id=npm-plugin-cache,target=/root/.npm,sharing=locked \
    find plugins -mindepth 2 -maxdepth 2 -name package.json \
         -execdir npm install --omit=dev --unsafe-perm=true;

 # NOTE: No COPY . . here! JS source files aren't copied yet to keep cache tight

###############################################################################
# Stage 3 – bring in the rest of the code, build assets                       #
###############################################################################
FROM node-modules AS builder
ARG COUNTLY_PLUGINS
WORKDIR /opt/countly

# 3.1 copy the rest of the source tree *now* (after model compilation)
COPY . .

# 3.2 remove unsupported plugins & copy default configs
RUN rm -rf plugins/data_migration plugins/errorlogs && \
    cp -n api/config.sample.js api/config.js && \
    cp -n frontend/express/config.sample.js frontend/express/config.js && \
    cp -n frontend/express/public/javascripts/countly/countly.config.sample.js \
          frontend/express/public/javascripts/countly/countly.config.js

# 3.3 build plugins.json and frontend assets
RUN echo "$COUNTLY_PLUGINS" | tr ',' '\n' | awk 'BEGIN{print "["} {if(NR>1) printf ","; printf "\"%s\"", $0} END{print "]"}' > plugins/plugins.json && \
    npx grunt dist-all

# 3.4 strip test artefacts & caches
RUN npm remove -y --no-save mocha nyc should supertest && \
    rm -rf test /root/.npm /tmp/* /var/tmp/* /var/log/* && \
    apt-get autoremove -y && apt-get clean && rm -rf /var/lib/apt/lists/*

###############################################################################
# Stage 4 – runtime (minimal, no compilers)                                    #
###############################################################################
FROM node:24-bookworm-slim AS runtime

# 4.1 runtime libs (no -dev)
RUN set -eux; apt-get update && apt-get install -y --no-install-recommends \
      zlib1g libncurses6 libgdbm6 libnss3 libreadline8 libffi8 libbz2-1.0 \
      libgbm1 gconf-service libasound2 libatk1.0-0 libatk-bridge2.0-0 libcairo2 \
      libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgconf-2-4 \
      libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 \
      libpangocairo-1.0-0 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 \
      libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 \
      libxtst6 fonts-liberation libappindicator1 lsb-release xdg-utils && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# 4.2 copy only python runtime (no headers)
COPY --from=base /usr/local/bin/python3.8 /usr/local/bin/python3.8
COPY --from=base /usr/local/lib/python3.8 /usr/local/lib/python3.8
RUN ln -s /usr/local/bin/python3.8 /usr/local/bin/python3 && ldconfig

# 4.3 create countly user & dirs
RUN groupadd -r countly && useradd -r -g countly -u 1001 countly && \
    mkdir -p /.npm && chown -R 1001:0 /.npm

WORKDIR /opt/countly
COPY --from=builder --chown=countly:countly /opt/countly .

ENV COUNTLY_CONFIG_API_API_HOST="0.0.0.0" \
    COUNTLY_CONFIG_FRONTEND_HOST="0.0.0.0" \
    PUPPETEER_CACHE_DIR=/opt/countly/.cache/puppeteer \
    NODE_ENV=production

RUN mkdir -p log data .cache && chown -R 1001:0 . && chmod -R g=u .

EXPOSE 3001 3010 6001
USER 1001:0
CMD ["npm", "run", "start:api"]