{
    "AWSTemplateFormatVersion" : "2010-09-09",
    "Description" : "Countly Community Edition server",
    "Parameters" : {
        "InstanceType" : {
            "Description" : "EC2 instance type",
            "Type" : "String",
            "Default" : "t2.micro-1CPU.1GB-RAM.10usd-month",
            "AllowedValues" : [ "t2.micro-1CPU.1GB-RAM.10usd-month",
                                "t2.small-1CPU.2GB-RAM.20usd-month",
                                "t2.medium-2CPU.4GB-RAM.39usd-month",
                                "t2.large-2CPU.8GB-RAM.78usd-month",
                                "m3.medium-1CPU.3.75GB-RAM.50usd-month",
                                "m4.large-2CPU.8GB-RAM.94usd-month",
                                "m4.xlarge-4CPU.16GB-RAM.188usd-month",
                                "m4.2xlarge-8CPU.32GB-RAM.375usd-month",
                                "m4.4xlarge-16CPU.64GB-RAM.750usd-month",
                                "m4.10xlarge-40CPU.160GB-RAM.1875usd-month"
                                ],
            "ConstraintDescription" : "must be a valid EC2 instance type."
        },
        "MongoVolumeSize" : {
            "Description" : "Volume size for mongodb (in GB)",
            "Type" : "Number",
            "MinValue" : "1",
            "Default"  : "10",
            "ConstraintDescription" : "GB"
        },
        "KeyName" : {
            "Description" : "Your EC2 Key Pair, created in the first step",
            "Type" : "AWS::EC2::KeyPair::KeyName",
            "MinLength" : "2",
            "ConstraintDescription" : "must be the name of an existing EC2 KeyPair"
        }
    },
    "Mappings" : {
        "InstanceLabel2Type" : {
            "t2.micro-1CPU.1GB-RAM.10usd-month"  : { "Type" : "t2.micro" },
            "t2.small-1CPU.2GB-RAM.20usd-month"  : { "Type" : "t2.small" },
            "t2.medium-2CPU.4GB-RAM.39usd-month" : { "Type" : "t2.medium" },
            "t2.large-2CPU.8GB-RAM.78usd-month"  : { "Type" : "t2.large" },
            "m3.medium-1CPU.3.75GB-RAM.50usd-month" : { "Type" : "m3.medium" },
            "m4.large-2CPU.8GB-RAM.94usd-month"   : { "Type" : "m4.large" },
            "m4.xlarge-4CPU.16GB-RAM.188usd-month"   : { "Type" : "m4.xlarge" },
            "m4.2xlarge-8CPU.32GB-RAM.375usd-month"  : { "Type" : "m4.2xlarge" },
            "m4.4xlarge-16CPU.64GB-RAM.750usd-month"  : { "Type" : "m4.4xlarge" },
            "m4.10xlarge-40CPU.160GB-RAM.1875usd-month" : { "Type" : "m4.10xlarge" }          
        },
        "AWSInstanceType2Arch" : {
            "t2.micro"  : { "Arch" : "64HVM" },
            "t2.small"  : { "Arch" : "64HVM" },
            "t2.medium" : { "Arch" : "64HVM" },
            "t2.large"  : { "Arch" : "64HVM" },
            "m3.medium" : { "Arch" : "64HVM" },
            "m4.large"   : { "Arch" : "64HVM" },
            "m4.xlarge"   : { "Arch" : "64HVM" },
            "m4.2xlarge"  : { "Arch" : "64HVM" },
            "m4.4xlarge"  : { "Arch" : "64HVM" },
            "m4.10xlarge" : { "Arch" : "64HVM" }          
        },
        "AWSRegionArch2AMI" : {
            "us-east-1"      : { "64" : "ami-d85e75b0", "64HVM" : "ami-d05e75b8" },
            "us-west-2"      : { "64" : "ami-6989a659", "64HVM" : "ami-5189a661" },
            "us-west-1"      : { "64" : "ami-d16a8b95", "64HVM" : "ami-df6a8b9b" },
            "eu-west-1"      : { "64" : "ami-5da23a2a", "64HVM" : "ami-47a23a30" },            
            "eu-central-1"   : { "64" : "ami-b6cff2ab", "64HVM" : "ami-accff2b1" },            
            "ap-southeast-1" : { "64" : "ami-e8f1c1ba", "64HVM" : "ami-96f1c1c4" },     
            "ap-northeast-1" : { "64" : "ami-936d9d93", "64HVM" : "ami-8d6d9d8d" },
            "ap-southeast-2" : { "64" : "ami-7163104b", "64HVM" : "ami-69631053" },  
            "sa-east-1"      : { "64" : "ami-55883348", "64HVM" : "ami-4d883350" }
        }
    },
    "Resources" : {
                
        "InstanceUser" : {
            "Type" : "AWS::IAM::User",
            "Properties" : {
                "Path": "/",
                "Policies": [{
                    "PolicyName": "root",
                    "PolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement":[{
                            "Effect": "Allow",
                            "Action": [
                                "sns:Publish",
                                "sns:GetTopicAttributes",
                                "sns:List*",
                                "sqs:ReceiveMessage",
                                "sqs:DeleteMessage",
                                "s3:Get*",
                                "s3:List*"
                            ],
                            "Resource": "*"
                        }]
                    }
                }]
            }
        },

        "InstanceKeys" : {
            "Type" : "AWS::IAM::AccessKey",
            "Properties" : {
                "UserName" : {"Ref": "InstanceUser"}
            }
        },

        "InstanceRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                    {
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [
                                "ec2.amazonaws.com"
                            ]
                        },
                        "Action": [
                            "sts:AssumeRole"
                        ]
                    }]
                },
                "Path": "/"
            }
        },

        "InstanceRolePolicies": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "InstanceRole",
                "PolicyDocument": {
                    "Statement": [
                    {
                        "Effect": "Allow",
                        "Action": [                            
                            "cloudformation:Describe*",
                            "cloudformation:GetTemplate"
                        ],
                        "Resource": "*"
                    }]
                },
                "Roles": [
                    {
                        "Ref": "InstanceRole"
                    }
                ]
            }
        },

        "CloudWatchPolicies": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "CloudWatchRole",
                "PolicyDocument": {
                    "Statement": [
                    {
                        "Effect": "Allow",
                        "Action": [
                            "logs:Create*",
                            "logs:PutLogEvents",
                            "s3:GetObject",
                            "logs:DescribeLogStreams"
                            ],
                        "Resource": [
                                "arn:aws:logs:*:*:*",
                                "arn:aws:s3:::*"
                            ]
                    }]
                },
                "Roles": [
                {
                    "Ref": "InstanceRole"
                }]
            }
        },

        "InstanceRoleInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                {
                    "Ref": "InstanceRole"
                }]
            }
        },
           
        "MongoDbVolume" : {
             "Type" : "AWS::EC2::Volume",
             "Properties" : {
                 "Size" : { "Ref" : "MongoVolumeSize" },
                 "VolumeType" : "gp2",            
                 "AvailabilityZone" : { "Fn::GetAtt" : [ "CountlyInstance", "AvailabilityZone" ]}
             },
             "DeletionPolicy" : "Snapshot"
        },

        "MountPoint" : {
               "Type" : "AWS::EC2::VolumeAttachment",
               "Properties" : {
                 "InstanceId" : { "Ref" : "CountlyInstance" },
                 "VolumeId"  : { "Ref" : "MongoDbVolume" },
                 "Device" : "/dev/sdf"
               }
        },        

        "CountlyInstance" : {
            "Type" : "AWS::EC2::Instance",
            "Metadata" : {
                "Comment" : "initialization",
                "AWS::CloudFormation::Init" : {
                    "config" : {                 
                        "files" : {
                            "/tmp/cwlogs/applogs.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[general]\n",
                                            "state_file= /var/awslogs/agent-state\n", "\n",
                                            "[countly_api]\n",
                                            "file = /home/ubuntu/countly_api.log\n",
                                            "log_group_name = ", {"Ref": "CountlyServerLogGroup"}, "\n",
                                            "log_stream_name = countly_api\n",
                                            "datetime_format = %d/%b/%Y:%H:%M:%S", "\n", "\n",
                                            "[countly_api_error]\n",
                                            "file = /home/ubuntu/countly_api.error.log\n",
                                            "log_group_name = ", {"Ref": "CountlyServerLogGroup"}, "\n",
                                            "log_stream_name = countly_api_error\n",
                                            "datetime_format = %d/%b/%Y:%H:%M:%S", "\n"                          
                                        ]
                                    ]
                                }
                            },

                            "/etc/cfn/cfn-hup.conf" : {
                                "content" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "[main]\n",
                                            "stack=", { "Ref" : "AWS::StackId" }, "\n",
                                            "region=", { "Ref" : "AWS::Region" }, "\n"
                                        ]
                                    ]},
                                "mode"    : "000400",
                                "owner"   : "root",
                                "group"   : "root"
                            },

                            "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
                                "content": {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "[cfn-auto-reloader-hook]\n",
                                            "triggers=post.update\n",
                                            "path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                                            "action=/opt/aws/bin/cfn-init -v ",
                                            "  --stack ", { "Ref" : "AWS::StackName" },
                                            "  --resource LaunchConfig ",
                                            "  --region ", { "Ref" : "AWS::Region" }, "\n",
                                            "runas=root\n"
                                        ]
                                    ]
                                }
                            }
                        }                        
                    }
                }
            },
            
            "Properties" : {
                "KeyName" : { "Ref" : "KeyName" },
                "ImageId" : { "Fn::FindInMap" : [
                                  "AWSRegionArch2AMI",
                                  { "Ref" : "AWS::Region" },
                                  { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Fn::FindInMap" : [ "InstanceLabel2Type", { "Ref" : "InstanceType" }, "Type" ] }, "Arch" ] } ] },              
                "InstanceType" : { "Fn::FindInMap" : [ "InstanceLabel2Type", { "Ref" : "InstanceType" }, "Type" ] },
                "SubnetId" : { "Ref" : "CountlySubnet" },             
                "SecurityGroupIds": [{ "Ref" : "InstanceSecurityGroup" }],
                "UserData"     : { "Fn::Base64" : { "Fn::Join" : ["", [

                    "#!/bin/bash -xe\n",
                    "sudo -s\n",
                    "fallocate -l 2G /swapfile", "\n",
                    "chmod 600 /swapfile", "\n",
                    "mkswap /swapfile", "\n",
                    "swapon /swapfile", "\n",
                    "echo '/swapfile   none    swap    sw    0   0' > /etc/fstab", "\n",                  
                    "apt-get update\n",
                    "apt-get -y install python-setuptools\n",
                    "cd /home/ubuntu\n",
                    "mkdir aws-cfn-bootstrap-latest\n",
                    "curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz | tar xz -C aws-cfn-bootstrap-latest --strip-components 1\n",
                    "sudo easy_install aws-cfn-bootstrap-latest\n",

                    "sudo /usr/local/bin/cfn-init --stack ",
                        { "Ref":"AWS::StackName" },
                        " --resource CountlyInstance",
                        " --region ",
                        { "Ref": "AWS::Region" },
                        "|| echo 'Failed to start cfn-hup 1 '\n",

                    "sudo /usr/local/bin/cfn-hup || echo 'Failed to start cfn-hup'\n",

                    "wget https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py\n",

                    "python awslogs-agent-setup.py -n -r ", { "Ref" : "AWS::Region" }, " -c /tmp/cwlogs/applogs.conf || error_exit 'Failed to run CloudWatch Logs agent setup'\n",
                    "cp /tmp/cwlogs/applogs.conf /var/awslogs/etc/awslogs.conf \n",                    
                    "sudo service awslogs restart \n",                    

                    "apt-get install -y ruby2.0\n",

                    "apt-get install -y unzip\n",
                    "curl https://s3.amazonaws.com/aws-cli/awscli-bundle.zip -o awscli-bundle.zip\n",
                    "unzip awscli-bundle.zip\n",
                    "./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws\n",

                    "cd /home/ubuntu\n",
                    "/usr/local/bin/aws s3 cp s3://aws-codedeploy-us-east-1/latest/install . --region ", { "Ref" : "AWS::Region" }, " \n",
                    "chmod +x ./install \n",
                    "./install auto \n",

                    "apt-get -y install mongodb > /tmp/apt-mongo.log 2>&1\n",

                    "apt-get install -y nodejs > /tmp/node_install.log 2>&1\n",
                    "apt-get install -y npm > /tmp/npm_install.log 2>&1\n",
                    "npm install -g forever\n",

                    "while [ ! -e /dev/xvdf ]; do echo waiting for /dev/xvdf to attach; sleep 2; done\n",
                    
                    "mkfs -t ext4 /dev/xvdf", "\n",
                    
                    "mount /dev/xvdf /media", "\n",
                    
                    "mkdir /media/mongodb", "\n",
                    
                    "chown -R mongodb:mongodb /media/mongodb", "\n",
                                        
                    "sed -i -e 's/dbpath=\\/var\\/lib\\/mongodb/dbpath=\\/media\\/mongodb/g' /etc/mongodb.conf", " \n",
                        
                    "service mongodb restart \n",

                    "apt-get install -y git-core \n",
                    
                    "echo '", { "Ref" : "InstanceWaitHandle" }, "' > /tmp/insw.log ", " \n",
                        
                    "curl -X PUT -H 'Content-Type:' --data-binary '{\"Status\" : \"SUCCESS\",\"Reason\" : \"Configuration Complete\",\"UniqueId\" : \"ID1234\",\"Data\" : \"Application has completed configuration.\"}' '", { "Ref" : "InstanceWaitHandle" }, "'", "\n",                                    
                                        
                    "/usr/local/bin/cfn-signal -e $? ",
                    "         --stack ", { "Ref" : "AWS::StackName" },
                    "         --resource CountlyInstance ",
                    "         --region ", { "Ref" : "AWS::Region" }, "\n"
                    
                    
                ]]}},
                "IamInstanceProfile": {
                    "Ref": "InstanceRoleInstanceProfile"
                },
                "Tags" : [ { 
                             "Key" : "Name",
                             "Value" : "Countly-server"
                           }],
                "BlockDeviceMappings" : [{
                    "DeviceName" : "/dev/sda1",
                    "Ebs" : {
                        "VolumeSize" : "12"
                    }
                }]
            }            
        },
        
        "CountlyVPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": "172.31.0.0/16"               
            }    
        },
        
        "InstanceSecurityGroup" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : ".",
                "SecurityGroupIngress" : [ {
                    "IpProtocol" : "tcp",
                    "FromPort"   : "22",
                    "ToPort"     : "22",
                    "CidrIp"     : "0.0.0.0/0"
                },
                {
                    "IpProtocol" : "tcp",
                    "FromPort"   : "80",
                    "ToPort"     : "80",
                    "CidrIp"     : "0.0.0.0/0"
                } ],
                "VpcId" : { "Ref" : "CountlyVPC" }        
            }               
        },
        
        "CountlySubnet" : {
           "Type" : "AWS::EC2::Subnet",
           "Properties" : {             
              "CidrBlock" : "172.31.0.0/16",             
              "VpcId" : { "Ref" : "CountlyVPC" }
           }
        },    
        
        "CountlyIp" : {
            "Type" : "AWS::EC2::EIP",
            "Properties": {
                "Domain" : "vpc"
            }
        },
        
        "CountlyIpAssociation" : {
           "Type": "AWS::EC2::EIPAssociation",
           "Properties": {
              "AllocationId": { "Fn::GetAtt" : [ "CountlyIp", "AllocationId" ]},             
              "InstanceId" : { "Ref" : "CountlyInstance" }         
           }
        },
        
        "CountlyInternetGateway" : {
            "Type" : "AWS::EC2::InternetGateway",
                "Properties" : {
                    "Tags" : [ {"Key" : "Name", "Value" : "CountlyInternetGateway"}]
            }
        },
        
        "InternetGatewayAttachment" : {
           "Type" : "AWS::EC2::VPCGatewayAttachment",
           "Properties" : {
              "VpcId" : { "Ref" : "CountlyVPC" },
              "InternetGatewayId" : { "Ref" : "CountlyInternetGateway" }
           }
        },
        
        "CountlyRouteTable" : {
            "Type" : "AWS::EC2::RouteTable",
            "Properties" : {
                "VpcId" : { "Ref" : "CountlyVPC" },
                "Tags" : [ { "Key" : "Name", "Value" : "CountlyRouteTable" } ]
            }
        },
        
        "Route" : {
            "Type" : "AWS::EC2::Route",      
            "DependsOn" : "InternetGatewayAttachment",      
            "Properties" : {
                "RouteTableId" : { "Ref" : "CountlyRouteTable" },
                "DestinationCidrBlock" : "0.0.0.0/0",
                "GatewayId" : { "Ref" : "CountlyInternetGateway" }
            }
        },
        
        "SubnetRouteTableAssociation" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "SubnetId" : { "Ref" : "CountlySubnet" },
                "RouteTableId" : { "Ref" : "CountlyRouteTable" }
            }
        },

        "CountlyServerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "RetentionInDays": 7
            }
        },
            
        "CodeDeployRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                    {
                        "Sid": "",
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [
                                "codedeploy.amazonaws.com"
                            ]
                        },
                        "Action": [
                            "sts:AssumeRole"
                        ]
                    }
                    ]
                },
                "Path": "/"
            }
        },

        "CodeDeployRolePolicies": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "CodeDeployRole",
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                    {
                        "Effect": "Allow",
                        "Action": [         
                            "ec2:*"
                        ],
                        "Resource": "*"
                    }]
                },
                "Roles": [
                {
                    "Ref": "CodeDeployRole"
                }]
            }
        },
        
        "InstanceWaitHandle" : {
            "Type" : "AWS::CloudFormation::WaitConditionHandle",
            "Properties" : { }
        },
        
        "InstanceWait" : {
            "Type" : "AWS::CloudFormation::WaitCondition",
            "DependsOn" : "CountlyInstance",
            "Properties" : {
                "Handle" : { "Ref" : "InstanceWaitHandle" },
                "Timeout" : "600"
            }
        },
                
        "CountlyServer" : {
            "Type" : "AWS::CodeDeploy::Application"
        },
        
        "DeploymentGroup" : {
            "Type" : "AWS::CodeDeploy::DeploymentGroup",
            "Properties" : {
                "ApplicationName" : {"Ref" : "CountlyServer" },
                "Ec2TagFilters" : [ {
                                    "Key" : "Name",
                                    "Type" : "KEY_AND_VALUE",
                                    "Value" : "Countly-server"
                                } ],
                "Deployment" : {
                    "Description" : "Countly",
                    "IgnoreApplicationStopFailures" : "true",
                    "Revision" : {
                        "RevisionType" : "GitHub",
                        "GitHubLocation" : {
                            "CommitId"   : "b0f1b0559055d8bef3d98c8664ab453951de4764",
                            "Repository" : "Countly/countly-server"
                        }
                    }
                },
                "ServiceRoleArn" : { "Fn::GetAtt" : [ "CodeDeployRole" , "Arn" ] }              
                
            },
            "DependsOn" : "InstanceWait"
        }
        
    },

    "Outputs" : {
                         
        "PublicIp": {
            "Description": "Instance ip",
            "Value": {
                "Fn::GetAtt" : [ "CountlyInstance" , "PublicIp" ]
            }
        },
        "InstanceId": {
            "Description": "Instance id",
            "Value": {
                "Ref": "CountlyInstance"
            }
        },
        "CloudWatchLogGroupName": {
            "Description": "The name of the CloudWatch log group",
            "Value": {
                "Ref": "CountlyServerLogGroup"
            }
        }
    }
}
