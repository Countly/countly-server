Only in node-time: build
diff -r -u node-time.orig/src/time.cc node-time/src/time.cc
--- node-time.orig/src/time.cc	2017-02-20 13:52:14.000000000 -0500
+++ node-time/src/time.cc	2019-11-22 18:21:34.779650000 -0500
@@ -9,7 +9,7 @@
 
 class Time {
   public:
-  static void Init(Handle<Object> target) {
+  static void Init(Local<Object> target) {
     Nan::HandleScope scope;
 
     // time(3)
@@ -70,12 +70,15 @@
 
     Nan::Set(obj, Nan::New("tzname").ToLocalChecked(), tznameArray);
 
+    time_t rawtime = 0;
+    time(&rawtime);
+    struct tm *timeinfo = localtime( &rawtime );
     // The 'timezone' long is the "seconds West of UTC"
-    Nan::Set(obj, Nan::New("timezone").ToLocalChecked(), Nan::New<v8::Number>( timezone ));
+    Nan::Set(obj, Nan::New("timezone").ToLocalChecked(), Nan::New<v8::Number>( timeinfo->tm_gmtoff ));
 
     // The 'daylight' int is obselete actually, but I'll include it here for
     // curiosity's sake. See the "Notes" section of "man tzset"
-    Nan::Set(obj, Nan::New("daylight").ToLocalChecked(), Nan::New<v8::Number>( daylight ));
+    Nan::Set(obj, Nan::New("daylight").ToLocalChecked(), Nan::New<v8::Number>( timeinfo->tm_isdst ));
 #endif
     info.GetReturnValue().Set(scope.Escape(obj));
   }
@@ -84,7 +87,7 @@
     Nan::EscapableHandleScope scope;
 
     // Construct the 'tm' struct
-    time_t rawtime = static_cast<time_t>(info[0]->IntegerValue());
+    time_t rawtime = static_cast<time_t>(info[0]->IntegerValue(Nan::GetCurrentContext()).FromJust());
     struct tm *timeinfo = localtime( &rawtime );
 
     // Create the return "Object"
@@ -138,13 +141,13 @@
     Local<Object> arg = info[0].As<v8::Object>();
 
     struct tm tmstr;
-    tmstr.tm_sec   = Nan::Get(arg, Nan::New("seconds").ToLocalChecked()).ToLocalChecked()->Int32Value();
-    tmstr.tm_min   = Nan::Get(arg, Nan::New("minutes").ToLocalChecked()).ToLocalChecked()->Int32Value();
-    tmstr.tm_hour  = Nan::Get(arg, Nan::New("hours").ToLocalChecked()).ToLocalChecked()->Int32Value();
-    tmstr.tm_mday  = Nan::Get(arg, Nan::New("dayOfMonth").ToLocalChecked()).ToLocalChecked()->Int32Value();
-    tmstr.tm_mon   = Nan::Get(arg, Nan::New("month").ToLocalChecked()).ToLocalChecked()->Int32Value();
-    tmstr.tm_year  = Nan::Get(arg, Nan::New("year").ToLocalChecked()).ToLocalChecked()->Int32Value();
-    tmstr.tm_isdst = Nan::Get(arg, Nan::New("isDaylightSavings").ToLocalChecked()).ToLocalChecked()->Int32Value();
+    tmstr.tm_sec   = Nan::Get(arg, Nan::New("seconds").ToLocalChecked()).ToLocalChecked()->Int32Value(Nan::GetCurrentContext()).FromJust();
+    tmstr.tm_min   = Nan::Get(arg, Nan::New("minutes").ToLocalChecked()).ToLocalChecked()->Int32Value(Nan::GetCurrentContext()).FromJust();
+    tmstr.tm_hour  = Nan::Get(arg, Nan::New("hours").ToLocalChecked()).ToLocalChecked()->Int32Value(Nan::GetCurrentContext()).FromJust();
+    tmstr.tm_mday  = Nan::Get(arg, Nan::New("dayOfMonth").ToLocalChecked()).ToLocalChecked()->Int32Value(Nan::GetCurrentContext()).FromJust();
+    tmstr.tm_mon   = Nan::Get(arg, Nan::New("month").ToLocalChecked()).ToLocalChecked()->Int32Value(Nan::GetCurrentContext()).FromJust();
+    tmstr.tm_year  = Nan::Get(arg, Nan::New("year").ToLocalChecked()).ToLocalChecked()->Int32Value(Nan::GetCurrentContext()).FromJust();
+    tmstr.tm_isdst = Nan::Get(arg, Nan::New("isDaylightSavings").ToLocalChecked()).ToLocalChecked()->Int32Value(Nan::GetCurrentContext()).FromJust();
     // tm_wday and tm_yday are ignored for input, but properly set after 'mktime' is called
 
     info.GetReturnValue().Set(scope.Escape(Nan::New<v8::Number>(static_cast<double>(mktime( &tmstr )))));
@@ -153,7 +156,7 @@
 };
 
 extern "C" {
-  static void init (Handle<Object> target) {
+  static void init (Local<Object> target) {
     Time::Init(target);
   }
   NODE_MODULE(time, init)
