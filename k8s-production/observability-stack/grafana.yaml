apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards-provider
  namespace: countly-observability
data:
  dashboards.yaml: |
    apiVersion: 1
    providers:
    - name: 'manual'
      orgId: 1
      folder: 'Countly'
      type: file
      disableDeletion: false
      updateIntervalSeconds: 60
      allowUiUpdates: true
      options:
        path: /var/lib/grafana/dashboards
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: countly-observability
data:
  datasources.yaml: |
    apiVersion: 1
    datasources:

    # 1 Prometheus – primary datasource
    - name: Prometheus
      uid: prometheus
      type: prometheus
      access: proxy
      url: http://prometheus.countly-observability.svc.cluster.local:9090
      isDefault: true

    # 2 Loki – logs datasource
    - name: Loki
      uid: loki
      type: loki
      access: proxy
      url: http://loki.countly-observability.svc.cluster.local:3100
      jsonData:
        derivedFields:
          - name: traceID
            matcherRegex: 'traceId=([A-Fa-f0-9]{32})'
            url: ${__value.raw}
            datasourceUid: tempo

    # 3 Tempo – traces datasource
    - name: Tempo
      uid: tempo
      type: tempo
      access: proxy
      url: http://tempo.countly-observability.svc.cluster.local:3200
      jsonData:
        httpMethod: GET

    # 4 Pyroscope – profiling datasource
    - name: Pyroscope
      uid: pyroscope
      type: grafana-pyroscope-datasource
      access: proxy
      url: http://pyroscope.countly-observability.svc.cluster.local:4040
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: countly-observability
  labels:
    app: grafana
spec:
  type: ClusterIP
  selector:
    app: grafana
  ports:
  - name: http
    port: 3000
    targetPort: 3000
    protocol: TCP
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
  namespace: countly-observability
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: countly-observability
  labels:
    app: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      initContainers:
      - name: wait-for-services
        image: busybox:1.35
        command: 
        - sh
        - -c
        - |
          echo "Waiting for datasource services to be ready..."
          until nc -z prometheus.countly-observability.svc.cluster.local 9090; do
            echo "Waiting for Prometheus..."
            sleep 2
          done
          until nc -z loki.countly-observability.svc.cluster.local 3100; do
            echo "Waiting for Loki..."
            sleep 2
          done
          echo "All services are ready!"
      - name: fix-permissions
        image: busybox:1.35
        command: ['sh', '-c', 'chmod 0640 /var/lib/grafana/grafana.db || true']
        volumeMounts:
        - name: storage
          mountPath: /var/lib/grafana
        securityContext:
          runAsUser: 472
          runAsGroup: 472
      containers:
      - name: grafana
        image: grafana/grafana:12.1.0
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: admin
        - name: GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS
          value: grafana-pyroscope-app,grafana-lokiexplore-app,grafana-exploretraces-app
        - name: GF_PLUGINS_CATALOG_URL
          value: https://grafana.com/api/plugins
        ports:
        - containerPort: 3000
          name: http
          protocol: TCP
        volumeMounts:
        - name: storage
          mountPath: /var/lib/grafana
        - name: datasources
          mountPath: /etc/grafana/provisioning/datasources
        - name: dashboard-provider
          mountPath: /etc/grafana/provisioning/dashboards
        - name: dashboards
          mountPath: /var/lib/grafana/dashboards
        resources:
          requests:
            cpu: 250m
            memory: 750Mi
          limits:
            cpu: 1000m
            memory: 1Gi
        startupProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          failureThreshold: 30
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 60
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
      securityContext:
        fsGroup: 472
        runAsNonRoot: true
        runAsUser: 472
      volumes:
      - name: storage
        persistentVolumeClaim:
          claimName: grafana-pvc
      - name: datasources
        configMap:
          name: grafana-datasources
      - name: dashboard-provider
        configMap:
          name: grafana-dashboards-provider
      - name: dashboards
        configMap:
          name: grafana-dashboards