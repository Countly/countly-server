{
    "extends": "eslint:recommended",
    "rules": {
        //        "quotes": ["warn", "single", { "avoidEscape": true }],
        "require-atomic-updates": "off",
        "block-spacing": [
            "error",
            "always"
        ],
        "brace-style": [
            "error",
            "stroustrup"
        ],
        "comma-spacing": [
            "error",
            {
                "before": false,
                "after": true
            }
        ],
        "comma-style": [
            "error",
            "last"
        ],
        "computed-property-spacing": [
            "error",
            "never"
        ],
        "curly": [
            "error",
            "all"
        ],
        "eol-last": "off",
        "func-call-spacing": [
            "error",
            "never"
        ],
        "indent": [
            "error",
            4
        ],
        "key-spacing": [
            "error",
            {
                "beforeColon": false,
                "afterColon": true
            }
        ],
        "keyword-spacing": [
            "error",
            {
                "before": true,
                "after": true
            }
        ],
        "lines-between-class-members": [
            "error",
            "always"
        ],
        "no-multi-spaces": [
            "error"
        ],
        "no-trailing-spaces": [
            "error",
            {
                "ignoreComments": true
            }
        ],
        "no-useless-escape": "off",
        "no-whitespace-before-property": [
            "error"
        ],
        "object-curly-newline": [
            "error",
            {
                "multiline": true,
                "consistent": true
            }
        ],
        "object-property-newline": [
            "error",
            {
                "allowAllPropertiesOnSameLine": true
            }
        ],
        "semi": [
            "error",
            "always"
        ],
        "semi-style": [
            "error",
            "last"
        ],
        "space-before-blocks": [
            "error",
            "always"
        ],
        "space-before-function-paren": [
            "error",
            "never"
        ],
        "space-in-parens": [
            "error",
            "never"
        ],
        "space-infix-ops": [
            "error"
        ],
        "space-unary-ops": [
            "error",
            {
                "words": true,
                "nonwords": false
            }
        ],
        "switch-colon-spacing": [
            "error"
        ],
        "unicode-bom": [
            "error",
            "never"
        ],
        "no-restricted-properties": [
            "warn",
            {
                "object": "Promise",
                "property": "map",
                "message": "Bluebird-specific method 'Promise.map' detected. Suggestion: use native arrays with Promise.all or a library like 'p-map'."
            },
            {
                "object": "Promise",
                "property": "reduce",
                "message": "Bluebird-specific method 'Promise.reduce' detected. Suggestion: use Array.reduce plus async/await or a concurrency library."
            },
            {
                "object": "Promise",
                "property": "filter",
                "message": "Bluebird-specific method 'Promise.filter' detected. Suggestion: use Array.filter plus async/await or a concurrency library."
            },
            {
                "object": "Promise",
                "property": "each",
                "message": "Bluebird-specific method 'Promise.each' detected. Suggestion: use a for-loop/forEach with async/await."
            },
            {
                "object": "Promise",
                "property": "props",
                "message": "Bluebird-specific method 'Promise.props' detected. Suggestion: use Promise.all with Object.entries or a custom approach."
            },
            {
                "object": "Promise",
                "property": "join",
                "message": "Bluebird-specific method 'Promise.join' detected. Suggestion: use Promise.all([...]) and destructuring in .then."
            },
            {
                "object": "Promise",
                "property": "try",
                "message": "Bluebird-specific method 'Promise.try' detected. Suggestion: use a try/catch block or an async function."
            },
            {
                "object": "Promise",
                "property": "attempt",
                "message": "Bluebird-specific method 'Promise.attempt' detected. Suggestion: same as 'Promise.try'â€”use try/catch or async."
            },
            {
                "object": "Promise",
                "property": "method",
                "message": "Bluebird-specific method 'Promise.method' detected. Suggestion: define an async function or return a native Promise."
            },
            {
                "object": "Promise",
                "property": "promisify",
                "message": "Bluebird-specific method 'Promise.promisify' detected. Suggestion: use native 'util.promisify' or wrap in a new Promise."
            },
            {
                "object": "Promise",
                "property": "promisifyAll",
                "message": "Bluebird-specific method 'Promise.promisifyAll' detected. Suggestion: consider 'util.promisify' for each function or a similar library."
            },
            {
                "object": "Promise",
                "property": "fromCallback",
                "message": "Bluebird-specific method 'Promise.fromCallback' detected. Suggestion: use new Promise(...) or 'util.promisify'."
            },
            {
                "object": "Promise",
                "property": "coroutine",
                "message": "Bluebird-specific method 'Promise.coroutine' detected. Suggestion: use native async/await."
            },
            {
                "object": "Promise",
                "property": "spawn",
                "message": "Bluebird-specific method 'Promise.spawn' detected. Suggestion: use native async/await."
            },
            {
                "object": "Promise",
                "property": "using",
                "message": "Bluebird-specific method 'Promise.using' detected. Suggestion: use try/finally or a resource-management library."
            },
            {
                "object": "Promise",
                "property": "disposer",
                "message": "Bluebird-specific method 'Promise.disposer' detected. Suggestion: use try/finally or a resource-management library."
            },
            {
                "object": "Promise",
                "property": "settle",
                "message": "Bluebird-specific method 'Promise.settle' detected. Suggestion: use native 'Promise.allSettled'."
            },

            /* ---------- Same methods on the Bluebird object itself ---------- */
            {
                "object": "Bluebird",
                "property": "map",
                "message": "Bluebird-specific method 'Bluebird.map' detected. Suggestion: use array mapping + Promise.all or 'p-map'."
            },
            {
                "object": "Bluebird",
                "property": "reduce",
                "message": "Bluebird-specific method 'Bluebird.reduce' detected. Suggestion: use array reduce + async/await or concurrency library."
            },
            {
                "object": "Bluebird",
                "property": "filter",
                "message": "Bluebird-specific method 'Bluebird.filter' detected. Suggestion: use array filter + async/await or concurrency library."
            },
            {
                "object": "Bluebird",
                "property": "each",
                "message": "Bluebird-specific method 'Bluebird.each' detected. Suggestion: use a for-loop or forEach + async/await."
            },
            {
                "object": "Bluebird",
                "property": "props",
                "message": "Bluebird-specific method 'Bluebird.props' detected. Suggestion: use Promise.all with object entries or a custom approach."
            },
            {
                "object": "Bluebird",
                "property": "join",
                "message": "Bluebird-specific method 'Bluebird.join' detected. Suggestion: use Promise.all([...]) and destructuring."
            },
            {
                "object": "Bluebird",
                "property": "try",
                "message": "Bluebird-specific method 'Bluebird.try' detected. Suggestion: use a try/catch block or async function."
            },
            {
                "object": "Bluebird",
                "property": "attempt",
                "message": "Bluebird-specific method 'Bluebird.attempt' detected. Suggestion: use a try/catch block or async function."
            },
            {
                "object": "Bluebird",
                "property": "method",
                "message": "Bluebird-specific method 'Bluebird.method' detected. Suggestion: define an async function or return a native Promise."
            },
            {
                "object": "Bluebird",
                "property": "promisify",
                "message": "Bluebird-specific method 'Bluebird.promisify' detected. Suggestion: use native 'util.promisify' or wrap in a new Promise."
            },
            {
                "object": "Bluebird",
                "property": "promisifyAll",
                "message": "Bluebird-specific method 'Bluebird.promisifyAll' detected. Suggestion: consider 'util.promisify' or a similar library."
            },
            {
                "object": "Bluebird",
                "property": "fromCallback",
                "message": "Bluebird-specific method 'Bluebird.fromCallback' detected. Suggestion: use new Promise(...) or 'util.promisify'."
            },
            {
                "object": "Bluebird",
                "property": "coroutine",
                "message": "Bluebird-specific method 'Bluebird.coroutine' detected. Suggestion: use native async/await."
            },
            {
                "object": "Bluebird",
                "property": "spawn",
                "message": "Bluebird-specific method 'Bluebird.spawn' detected. Suggestion: use native async/await."
            },
            {
                "object": "Bluebird",
                "property": "using",
                "message": "Bluebird-specific method 'Bluebird.using' detected. Suggestion: use try/finally or a resource-management library."
            },
            {
                "object": "Bluebird",
                "property": "disposer",
                "message": "Bluebird-specific method 'Bluebird.disposer' detected. Suggestion: use try/finally or a resource-management library."
            },
            {
                "object": "Bluebird",
                "property": "settle",
                "message": "Bluebird-specific method 'Bluebird.settle' detected. Suggestion: use native 'Promise.allSettled'."
            }
        ],
        "no-restricted-syntax": [
            "warn",
            {
                "selector": "CallExpression[callee.property.name='tap']",
                "message": "Bluebird-specific instance method '.tap()' detected. Suggestion: use '.then(value => { ...; return value; })'."
            },
            {
                "selector": "CallExpression[callee.property.name='tapCatch']",
                "message": "Bluebird-specific instance method '.tapCatch()' detected. Suggestion: use '.catch(error => { ...; throw error; })'."
            },
            {
                "selector": "CallExpression[callee.property.name='spread']",
                "message": "Bluebird-specific instance method '.spread()' detected. Suggestion: use '.then(([a, b]) => ... )' with array destructuring."
            },
            {
                "selector": "CallExpression[callee.type='MemberExpression'][callee.property.name='bind'][callee.object.name=/^(Promise|Bluebird|BPromise)$/]",
                "message": "Bluebird-specific '.bind()' detected on a Bluebird promise. Suggestion: manually bind 'this' or use arrow functions."
            },
            {
                "selector": "CallExpression[callee.property.name='delay']",
                "message": "Bluebird-specific instance method '.delay()' detected. Suggestion: use setTimeout() or a library (e.g., p-delay)."
            },
            {
                "selector": "CallExpression[callee.property.name='timeout']",
                "message": "Bluebird-specific instance method '.timeout()' detected. Suggestion: use p-timeout or similar library."
            },
            {
                "selector": "CallExpression[callee.property.name='return']",
                "message": "Bluebird-specific instance method '.return()' detected. Suggestion: use '.then(() => someValue)' or rewrite chain."
            },
            {
                "selector": "CallExpression[callee.property.name='throw']",
                "message": "Bluebird-specific instance method '.throw()' detected. Suggestion: use '.then(() => { throw error; })'."
            },
            {
                "selector": "CallExpression[callee.property.name='asCallback']",
                "message": "Bluebird-specific instance method '.asCallback()' detected. Suggestion: use 'util.callbackify' or rewrite manually."
            },
            {
                "selector": "CallExpression[callee.property.name='nodeify']",
                "message": "Bluebird-specific instance method '.nodeify()' detected. Suggestion: use 'util.callbackify' or rewrite manually."
            },
            {
                "selector": "CallExpression[callee.property.name='reflect']",
                "message": "Bluebird-specific instance method '.reflect()' detected. Suggestion: use 'Promise.allSettled' or custom handling."
            },
            {
                "selector": "CallExpression[callee.property.name='caught']",
                "message": "Bluebird-specific instance method '.caught()' detected. Suggestion: use '.catch()' with condition or separate logic."
            },
            {
                "selector": "CallExpression[callee.property.name='catchReturn']",
                "message": "Bluebird-specific instance method '.catchReturn()' detected. Suggestion: use '.catch(err => fallbackValue)' or similar."
            },
            {
                "selector": "CallExpression[callee.property.name='catchThrow']",
                "message": "Bluebird-specific instance method '.catchThrow()' detected. Suggestion: use '.catch(err => { throw newError; })'."
            }
        ]
    },
    "overrides": [
        {
            "files": [
                "plugins/content/frontend/vite.config.js",
                "plugins/journey_engine/frontend/vite.config.js",
                "plugins/journey_engine/frontend/vite-manifest.js"
            ],
            "rules": {
                "no-console": "off"
            },
            "parserOptions": {
                "ecmaVersion": 2023,
                "sourceType": "module"
            },
            "env": {
                "node": true,
                "es2023": true
            }
        },
        {
            "files": [
                "plugins/content/frontend/content-blocks/**/*.js",
                "plugins/journey_engine/frontend/builder/**/*.js"
            ],
            "extends": [
                "eslint:recommended"
            ],
            "rules": {
                "no-console": ["error"],
                "no-unused-vars": ["error", {
                    "argsIgnorePattern": "^_",   // unused function args
                    "varsIgnorePattern": "^_"    // unused variables
                }]
            },
            "parserOptions": {
                "ecmaVersion": 2023,
                "sourceType": "module",
                "extraFileExtensions": [".vue"]
            },
            "env": {
                "node": true,
                "es2023": true,
                "es6": true
            }
        },
        {
            "files": [
                "frontend/express/public/javascripts/countly/*.js",
                "frontend/express/public/javascripts/countly/vue/*.js",
                "frontend/express/public/javascripts/countly/vue/components/*.js",
                "frontend/express/public/javascripts/countly/vue/data/*.js",
                "frontend/express/public/core/*/javascripts/countly.*.js",
                "plugins/*/frontend/public/javascripts/countly.*.js"
            ],
            "parserOptions": {
                "ecmaVersion": 2020
            },
            "env": {
                "browser": true,
                "es2020": true
            },
            "rules": {
                "valid-jsdoc": [
                    "error",
                    {
                        "requireReturn": false
                    }
                ],
                "require-jsdoc": [
                    "error",
                    {
                        "require": {
                            "FunctionDeclaration": true,
                            "MethodDefinition": true,
                            "ClassDeclaration": true,
                            "ArrowFunctionExpression": true,
                            "FunctionExpression": false
                        }
                    }
                ],
                "for-direction": [
                    "off"
                ],
                "no-console": [
                    "error"
                ],
                "no-control-regex": [
                    "off"
                ],
                "dot-notation": [
                    "error"
                ],
                "eqeqeq": [
                    "error",
                    "always"
                ],
                "no-alert": [
                    "error"
                ],
                "no-caller": [
                    "error"
                ],
                "no-eval": [
                    "error"
                ],
                "no-extend-native": [
                    "error"
                ],
                "no-iterator": [
                    "error"
                ],
                "no-loop-func": [
                    "error"
                ],
                "no-shadow": [
                    "error"
                ]
            }
        },
        {
            "files": [ "plugins/content/api/positioning/**/*.js" ],
            "parserOptions": {
                "ecmaVersion": 2023,
                "sourceType": "module"
            },
            "env": {
                "node": true,
                "es2023": true
            }
        },
        {
            "files": [ "plugins/content/api/positioning/**/*.cjs" ],
            "parserOptions": {
                "ecmaVersion": 2023,
                "sourceType": "commonjs"
            },
            "env": {
                "node": true,
                "es2023": true
            }
        },
        {
            "files": [
                "api/**/*.js",
                "frontend/express/*.js",
                "frontend/express/libs/*.js",
                "plugins/pluginManager.js",
                "plugins/pluginDependencies.js",
                "plugins/*/api/**/*.js",
                "plugins/*/frontend/**/*.js",
                "plugins/*/extend/**/*.js"
            ],
            "excludedFiles": [
                "plugins/*/frontend/public/**/*.js",
                "plugins/content/frontend/content-blocks/**/*.js",
                "plugins/journey_engine/frontend/builder/**/*.js",
                "plugins/content/frontend/content-blocks/**/*.vue",
                "plugins/journey_engine/frontend/builder/**/*.vue"
            ],
            "env": {
                "es2023": true,
                "node": true
            },
            "parserOptions": {
                "ecmaVersion": 2023
            },
            "rules": {
                "no-console": "off",
                "valid-jsdoc": [
                    "error",
                    {
                        "requireReturn": false
                    }
                ],
                "require-jsdoc": [
                    "error",
                    {
                        "require": {
                            "FunctionDeclaration": true,
                            "MethodDefinition": true,
                            "ClassDeclaration": true,
                            "ArrowFunctionExpression": true,
                            "FunctionExpression": false
                        }
                    }
                ],
                "for-direction": [
                    "off"
                ],
                "no-control-regex": [
                    "off"
                ],
                "no-await-in-loop": [
                    "off"
                ],
                "dot-notation": [
                    "error"
                ],
                "eqeqeq": [
                    "error",
                    "always"
                ],
                "no-alert": [
                    "error"
                ],
                "no-caller": [
                    "error"
                ],
                "no-eval": [
                    "error"
                ],
                "no-extend-native": [
                    "error"
                ],
                "no-iterator": [
                    "error"
                ],
                "no-loop-func": [
                    "off"
                ],
                "no-shadow": [
                    "error"
                ]
            }
        },
        {
            "files": [
                "Gruntfile.js",
                "bin/**/*.js",
                "scripts/**/*.js",
                "extend/**/*.js",
                "plugins/*/*.js",
                "plugins/*/scripts/*.js",
                "./*.js"
            ],
            "excludedFiles": "plugins/*/tests.js",
            "env": {
                "es2023": true,
                "node": true
            },
            "parserOptions": {
                "ecmaVersion": 2023
            },
            "rules": {
                "no-console": "off"
            }
        },
        {
            "files": [
                "test/**/*.js",
                "plugins/*/tests/**/*.js",
                "plugins/*/tests.js"
            ],
            "env": {
                "es2023": true,
                "node": true,
                "mocha": true
            },
            "parserOptions": {
                "ecmaVersion": 2023
            },
            "rules": {
                "no-console": "off",
                "no-unused-vars": "off",
                "no-redeclare": "off"
            }
        },
        {
            "files": [
                "ui-tests/**/*.js"
            ],
            "env": {
                "es2023": true,
                "node": true,
                "mocha": true,
                "cypress/globals": true
            },
            "plugins": [
                "cypress"
            ],
            "globals": {
                "Cypress": "readonly",
                "cy": "readonly"
            },
            "parserOptions": {
                "ecmaVersion": 2023,
                "sourceType": "module"
            },
            "rules": {
                "no-console": "off",
                "no-unused-vars": "off",
                "no-redeclare": "off"
            }
        }
    ]
}
