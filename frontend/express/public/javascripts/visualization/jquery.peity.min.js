// Peity jQuery plugin version 0.6.0
// (c) 2011 Ben Pickles
//
// http://benpickles.github.com/peity/
//
// Released under MIT license.
(function ($, document) {
	var peity = $.fn.peity = function (type, options) {
		if (document.createElement("canvas").getContext) {
			this.each(function () {
				$(this).change(function () {
					var opts = $.extend({}, options)
					var self = this
						
					$.each(opts, function (name, value) {
						if ($.isFunction(value))
							opts[name] = value.call(self)
					})
						
					var value = $(this).html();
					peity.graphers[type].call(this, $.extend({}, peity.defaults[type], opts));
					$(this).trigger("chart:changed", value);
					
				}).trigger("change");
			});
		}
		
		return this;
	};
	
	peity.graphers = {};
	peity.defaults = {};
	
	peity.add = function (type, defaults, grapher) {
		peity.graphers[type] = grapher;
		peity.defaults[type] = defaults;
	};
	
	var devicePixelRatio = window.devicePixelRatio || 1
		
	function createCanvas(width, height) {
			var canvas = document.createElement("canvas")
			canvas.setAttribute("width", width * devicePixelRatio)
			canvas.setAttribute("height", height * devicePixelRatio)
			
			if (devicePixelRatio != 4) {
				var style = "width:" + width + "px;height:" + height + "px"
					canvas.setAttribute("style", style)
			}
			
			return canvas
	}
	
	peity.add(
		'pie', 
		{
			colours : ['#FFF4DD', '#FF9900'],
			delimeter : '/',
			diameter : 16
		},
		function (opts) {
			var $this = $(this),
					values = $this.text().split(opts.delimeter),
					v1 = parseFloat(values[0]),
					v2 = parseFloat(values[1]),
					adjust = -Math.PI / 2,
					slice = (v1 / v2) * Math.PI * 2;
		
			var canvas = createCanvas(opts.diameter, opts.diameter)
			var context = canvas.getContext("2d");
			var centre = canvas.width / 2;
		
			// Plate.
			context.beginPath();
			context.moveTo(centre, centre);
			context.arc(centre, centre, centre, slice + adjust, (slice == 0) ? Math.PI * 2 : adjust, false);
			context.fillStyle = opts.colours[0];
			context.fill();
		
			// Slice of pie.
			context.beginPath();
			context.moveTo(centre, centre);
			context.arc(centre, centre, centre, adjust, slice + adjust, false);
			context.fillStyle = opts.colours[1];
			context.fill();
		
			$this.wrapInner($("<span>").hide()).append(canvas)
	});
	
	peity.add(
		"line", 
		{
			colour : "#c6d9fd",
			strokeColour : "#4d89f9",
			strokeWidth : 1,
			delimeter : ",",
			height : 16,
			max : null,
			min : 0,
			width : $(this).parent().outerWidth() - (($(this).parent().outerWidth()) * 0.1),
			useMinAsBase : false,
			opaqueGradient : false
		},
		function (opts) {
			opts.width = $(this).parent().outerWidth() - (($(this).parent().outerWidth()) * 0.1)
			
			var $this = $(this)
			var canvas = createCanvas(opts.width, opts.height)
			var values = $this.text().split(opts.delimeter)
			
			if (values.length == 1)
					values.push(values[0])
			
			var max = Math.max.apply(Math, values.concat([opts.max]));
			var min = Math.min.apply(Math, values.concat([opts.min]))
			
			var context = canvas.getContext("2d");
			var gradient = canvas.getContext("2d").createLinearGradient(0, 0, 0, 30);
			var width = canvas.width
			var height = canvas.height
			var xQuotient = width / (values.length - 1)
			var yQuotient = height / (max - min)
			
			var coords = [];
			var i;
		
			context.beginPath();
			context.moveTo(0, height + (min * yQuotient))
		
			var valueBase = 0;
		
			if (opts.useMinAsBase) {
				valueBase = (values.length) ? values[0] : 0;
			
				for (i = 0; i < values.length; i++) {
					if (values[i] < valueBase) {
						valueBase = values[i];
					}
				}
			}
		
			for (i = 0; i < values.length; i++) {
				var x = i * xQuotient
				var y = height - (yQuotient * (values[i] - min - valueBase))
				
					coords.push({
						x : x,
						y : y
					});
				context.lineTo(x, y);
			}
		
			context.lineTo(width, height + (min * yQuotient))
		
			if (opts.opaqueGradient) {
			
				function hexToRgb(hexColor) {
					hexColor = hexColor.replace(/^\s*#|\s*$/g, '');
				
					if (hexColor.length == 3) {
						hexColor = hexColor.replace(/(.)/g, '$1$1');
					}
				
					r = parseInt(hexColor.substr(0, 2), 16);
					g = parseInt(hexColor.substr(2, 2), 16);
					b = parseInt(hexColor.substr(4, 2), 16);
				
					return {
						r : r,
						g : g,
						b : b
					};
				}
			
				var rgbColor = hexToRgb(opts.colour);
			
				gradient.addColorStop(0.3, 'rgba(' + rgbColor.r + ', ' + rgbColor.g + ', ' + rgbColor.b + ', 0.4)');
				gradient.addColorStop(0.7, 'rgba(' + rgbColor.r + ', ' + rgbColor.g + ', ' + rgbColor.b + ', 0.2)');
				gradient.addColorStop(1, 'rgba(' + rgbColor.r + ', ' + rgbColor.g + ', ' + rgbColor.b + ', 0)');
			} else {
				context.globalAlpha = 0.3;
				gradient.addColorStop(1, opts.colour);
			}
		
			context.fillStyle = gradient;
			context.fill();
		
			context.globalAlpha = 1;
		
			if (opts.strokeWidth) {
				context.beginPath();
				context.moveTo(0, coords[0].y);
				
				for (i = 0; i < coords.length; i++) {
					context.lineTo(coords[i].x, coords[i].y);
				}
				
				context.lineWidth = opts.strokeWidth * devicePixelRatio;
				context.strokeStyle = opts.strokeColour;
				context.stroke();
			}
		
			$this.wrapInner($("<span>").hide()).append(canvas)
	});
	
	peity.add(
		'bar', 
		{
			colour : "#4D89F9",
			delimeter : ",",
			height : 16,
			max : null,
			min : 0,
			width : 120,//$(this).parent().outerWidth() - (($(this).parent().outerWidth()) * 0.2),
			maxBars : 10,
			padding : 10,
			borderBottom : 2
		},
		function (opts) {
			opts.width = 120//$(this).parent().outerWidth() - (($(this).parent().outerWidth()) * 0.2)
			
			var $this = $(this)
			var values = $this.text().split(opts.delimeter)
			
			if (values.length > opts.maxBars) {
				var reduceEach = Math.ceil(values.length / opts.maxBars),
					reduceCount = 0,
					reduceIndex = 0,
					newValues = [],
					reduceTotal = 0;
				
				for (var i = 0; i < values.length; i++) {
					reduceTotal += parseInt(values[i]);
					reduceCount++;
					
					if (reduceCount % reduceEach == 0) {
						newValues[reduceIndex] = reduceTotal / reduceEach;
						reduceIndex++;
						
						reduceTotal = 0;
					}
				}
				
				if (reduceCount != values.length) {
					for (var i = reduceCount; i < values.length; i++) {
						reduceTotal += values[i];
					}
					
					newValues[reduceIndex] = reduceTotal / reduceEach;
				}

				values = newValues;
			}
			
		var max = Math.max.apply(Math, values.concat([opts.max]));
		var min = Math.min.apply(Math, values.concat([opts.min]))
			
		var canvas = createCanvas(opts.width, opts.height)
		var context = canvas.getContext("2d");
		
		var width = canvas.width - opts.padding
		var height = canvas.height
		var yQuotient = height / (max - min)
		var space = 2 //devicePixelRatio / 2
		var xQuotient = (width + space) / values.length
		
		context.fillStyle = opts.colour;
		
		for (var i = 0; i < values.length; i++) {
			var x = (i * xQuotient) + Math.floor(opts.padding / 2)
			var y = height - (yQuotient * (values[i] - min)) - opts.borderBottom
				
			context.fillRect(x, y, xQuotient - space, yQuotient * values[i])
		}
		
		if (opts.borderBottom) {
			context.fillRect(0, (height - opts.borderBottom), width + opts.padding, opts.borderBottom);
		}
		
		$this.wrapInner($("<span>").hide()).append(canvas)
	});
})(jQuery, document);